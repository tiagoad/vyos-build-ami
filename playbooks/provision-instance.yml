---
- name: Provision instance
  hosts: local
  connection: local
  gather_facts: True

  tasks:
    - name: Make sure that files/ssh-keys directory exists
      file:
        path: "{{ temp_folder }}"
        state: directory

    - name: Create an SSH key pair
      ec2_key:
        name: "{{ key_pair_name }}"
        region: "{{ ec2_region }}"
        wait: True
      register: key_pair

    - name: Dump key pair
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "{{ key_pair_file }}"
        mode: 0600

    - name: Find the default VPC
      ec2_vpc_net_facts:
        region: "{{ ec2_region }}"
        filters:
          isDefault: "true"
      register: vpc_nets

    - name: Find the default VPC subnet
      ec2_vpc_subnet_facts:
        region: "{{ ec2_region }}"
        filters:
          "vpc-id": "{{ vpc_nets.vpcs[0].vpc_id }}"
          defaultForAz: "true"
      register: vpc_subnets

    - name: Create a security group that allows SSH
      ec2_group:
        name: "vyos_build_ami"
        state: present
        description: This security group was generated by ansible playbook vyos_build_ami.yml
        region: "{{ ec2_region }}"
        vpc_id: "{{ vpc_subnets.subnets[0].vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: security_group

    # Look up the AMI id to use based on a search
    - name: Look up Debian Stretch AMI
      ec2_ami_facts:
        owners: 379101102735
        region: "{{ ec2_region }}"
        filters:
          name: "debian-stretch-hvm-*"
          architecture: "x86_64"
          hypervisor: "xen"
          "root-device-type": "ebs"
          state: available
      register: debian_ami

    # ---- Launch EC2 instance ----
    - name: Launch an EC2 instance
      ec2:
        key_name: "{{ key_pair_name }}"
        assign_public_ip: True
        vpc_subnet_id: "{{ vpc_subnets.subnets[0].subnet_id }}"
        image: "{{ debian_ami.images[0].image_id }}"
        instance_type: "{{ instance_type }}"
        region: "{{ ec2_region }}"
        group_id: "{{ security_group.group_id  }}"
        wait: yes
        instance_tags:
          Name: "{{ placeholder }}"
          Type: "VyOS"
        volumes:
          - device_name: /dev/sdf
            volume_type: gp2
            volume_size: "{{ volume_size }}"
            delete_on_termination: True
      register: ec2_instance

    - name: Add instance's public DNS name to ansible host group ec2
      add_host:
        name: "{{ ec2_instance.instances[0].public_ip }}"
        groups: ec2

    - debug: msg="{{ ec2_instance.instances[0].public_ip }}"

    - name: Wait for instance's SSH port to open
      wait_for:
        host: "{{ ec2_instance.instances[0].public_ip }}"
        port: 22
        delay: 10
        timeout: 120
        state: started
